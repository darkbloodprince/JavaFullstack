<---------TOPICS COVERED----------------->

Bubble Sort and Selection Sort - Detailed Analysis
1. Bubble Sort
Intuition
Bubble Sort is a simple comparison-based sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.

Passes/Comparisons/Swaps
Passes: Up to n-1 passes (where n is the number of elements).

Comparisons: O(n²) in the worst case.

Swaps: O(n²) in the worst case (but can be optimized to O(n) for nearly sorted lists).

Code
public static void bubbleSort(int[] arr) {
    int n = arr.length;
    for (int i = 0; i < n - 1; i++) {
        boolean swapped = false;
        for (int j = 0; j < n - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap arr[j] and arr[j+1]
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                swapped = true;
            }
        }
        // If no swaps in a pass, the array is already sorted
        if (!swapped) break;
    }
}
Time and Space Complexity
Time Complexity:

Best Case: O(n) (if the array is already sorted).

Average Case: O(n²).

Worst Case: O(n²) (if the array is reverse sorted).

Space Complexity: O(1) (in-place sorting).

Stability and Adaptiveness
Stable: Yes (does not change the order of equal elements).

Adaptive: Yes (can detect if the list is already sorted and terminate early).

2. Selection Sort
Intuition
Selection Sort divides the input list into two parts: a sorted sublist and an unsorted sublist. It repeatedly selects the smallest (or largest) element from the unsorted sublist and moves it to the end of the sorted sublist.

Passes/Comparisons/Swaps
Passes: Exactly n-1 passes.

Comparisons: O(n²) (always performs n(n-1)/2 comparisons).

Swaps: O(n) (exactly n-1 swaps, one per pass).

Code

public static void selectionSort(int[] arr) {
    int n = arr.length;
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
        }
        // Swap the found minimum element with the first element of the unsorted sublist
        int temp = arr[minIndex];
        arr[minIndex] = arr[i];
        arr[i] = temp;
    }
}
Time and Space Complexity
Time Complexity:

Best Case: O(n²) (always performs the same number of comparisons).

Average Case: O(n²).

Worst Case: O(n²).

Space Complexity: O(1) (in-place sorting).

Stability and Adaptiveness
Stable: No (may change the order of equal elements).

Adaptive: No (always performs the same number of comparisons regardless of input order).

Key Differences Between Bubble Sort and Selection Sort
Feature Bubble Sort Selection Sort
Intuition   Adjacent swaps  Selects min/max and swaps
Best Case   O(n) (adaptive) O(n²) (non-adaptive)
Swaps   O(n²) (worst case)  O(n) (fixed)
Stability   Stable  Unstable
Adaptiveness    Adaptive (early termination)    Non-adaptive


When to Use Which?
Bubble Sort: Useful for small or nearly sorted datasets due to its adaptive nature.

Selection Sort: Useful when memory writes are costly (fewer swaps than Bubble Sort).