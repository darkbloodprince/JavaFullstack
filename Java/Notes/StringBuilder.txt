StringBuilder: Overcoming String Limitations
1. Problems with String Immutability
Strings are immutable in Java, which means:

Every modification creates a new String object

This leads to performance issues with frequent modifications

Memory waste as old strings remain in memory until garbage collected

Problem Example:
java
Copy
String str = "";
for(int i = 0; i < 10000; i++) {
    str += i; // Creates 10,000 new String objects!
}
Each += creates a new String

Extremely inefficient for large concatenations

2. StringBuilder to the Rescue
StringBuilder is a mutable sequence of characters designed for:

Efficient string manipulation

Avoiding unnecessary object creation

Better performance for repeated modifications

Memory Representation

Stack:           Heap:
sb -> [StringBuilder object]
       - char[] value (initial capacity 16)
       - int count (current length)
3. Creating StringBuilder
Initialization Options:

// Empty with default capacity (16)
StringBuilder sb1 = new StringBuilder(); 

// With initial value
StringBuilder sb2 = new StringBuilder("Hello");

// With specified capacity
StringBuilder sb3 = new StringBuilder(100);


4. Key StringBuilder Methods
Method	Description	Example
length()	Current length	sb.length()
charAt(idx)	Get character at index	sb.charAt(2)
setCharAt(idx, ch)	Set character at index	sb.setCharAt(0, 'X')
insert(idx, str)	Insert at position	sb.insert(2, "NEW")
append(str)	Add to end	sb.append(" World")
deleteCharAt(idx)	Remove character	sb.deleteCharAt(3)
delete(start, end)	Remove substring	sb.delete(1, 3)
replace(start, end, str)	Replace substring	sb.replace(0, 5, "Hi")
toString()	Convert to String	String s = sb.toString()
Important Notes:
setCharAt() is unique to StringBuilder (not available in String)



All methods modify the original StringBuilder (unlike String which creates new objects)
5. Performance Comparison
Inefficient String Version:

String str = "";
for(int i = 0; i < 10000; i++) {
    str += i; // Creates new String each time
}
// Time complexity: O(nÂ²)
Efficient StringBuilder Version:

StringBuilder sb = new StringBuilder();
for(int i = 0; i < 10000; i++) {
    sb.append(i); // Modifies same buffer
}
// Time complexity: O(n)



Why BufferedReader?
Much faster than Scanner for large inputs

Reads data in chunks

Essential for competitive programming with tight time limits

Key Takeaways
Use String when:

You need immutability (thread safety)

No frequent modifications

Use StringBuilder when:

You need to modify strings frequently

Performance is critical

Working with large strings or loops

Use BufferedReader when:

Reading large inputs

Performance is crucial (competitive programming)

StringBuilder provides the perfect solution to String's immutability limitations while maintaining efficiency and flexibility!