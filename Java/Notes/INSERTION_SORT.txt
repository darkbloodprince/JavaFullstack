<---TOPICS COVERED----------->
1. Insertion Sort
Intuition
Insertion Sort builds the final sorted array one item at a time by repeatedly taking the next element and inserting it into its correct position in the already sorted part of the array.

Passes/Comparisons/Shifts
Passes: n-1 passes (where n is array length)

Comparisons: Up to O(n²) in worst case

Shifts: Up to O(n²) in worst case (but fewer than Bubble Sort)

Code Example

public static void insertionSort(int[] arr) {
    int n = arr.length;
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        
        // Shift elements greater than key to the right
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}
Time and Space Complexity
Best Case: O(n) (when array is already sorted)

Average Case: O(n²)

Worst Case: O(n²) (when array is reverse sorted)

Space Complexity: O(1) (in-place sorting)

Stability and Adaptiveness
Stable: Yes (doesn't change order of equal elements)

Adaptive: Yes (efficient for nearly sorted data)

2. Step-by-Step Example
Let's sort: [5, 2, 4, 6, 1, 3]

Pass 1:

i=1, key=2

Compare with 5 → shift 5 right

Array: [2, 5, 4, 6, 1, 3]

Pass 2:

i=2, key=4

Compare with 5 → shift 5 right

Array: [2, 4, 5, 6, 1, 3]

Pass 3:

i=3, key=6

Already in correct position

Array remains same

Pass 4:

i=4, key=1

Compare and shift 6,5,4,2 right

Array: [1, 2, 4, 5, 6, 3]

Pass 5:

i=5, key=3

Compare and shift 6,5,4 right

Final sorted array: [1, 2, 3, 4, 5, 6]

3. Key Characteristics
Efficient for small datasets and nearly sorted data

Online algorithm - can sort as it receives input

Fewer writes than Selection Sort (better when writes are expensive)

More efficient than Bubble Sort in practice

4. Comparison with Other Sorts
Feature Insertion Sort  Bubble Sort Selection Sort
Best Case   O(n)    O(n)    O(n²)
Worst Case  O(n²)   O(n²)   O(n²)
Swaps   O(n²)   O(n²)   O(n)
Stability   Stable  Stable  Unstable
Adaptiveness    Adaptive    Adaptive    Non-adaptive
5. When to Use Insertion Sort?
Small datasets (n < 100)