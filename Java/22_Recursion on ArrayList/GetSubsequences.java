/*Get Subsequences
Given a string, we have to find out all subsequences of it.

You have to complete the function generateSubsequence that returns a list of all subsequences sorted lexically and it should not contain empty strings.

Note: A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.

Input Format
The first line of input contains a string s

Output Format
print all the subsequences of given string in sorted order

Example
Input

abc
Output

a
ab
abc
ac
b
bc
c
Explanation

The subsequences of abc printed in lexically sorted order

Constraints
1 <= s.length <= 100
Approach:

We write a recursive function that prints every sub-sequence of the sub-string starting from the second character str[1, n â€“ 1] after appending the first character of the string str[0] in the beginning of every sub-sequence. Terminating condition will be when the passed string is empty.

Then we remove the empty string from the answer generated and also sort it lexically using sort function.

Code as given below:

1. Java*/
import java.io.*;
import java.util.*;

public class GetSubsequences {

    // Recursive function to generate all subsequences of a given string
	public static ArrayList<String> recur(String str)
    {
        // Base case: if the string is empty, return a list containing an empty string
        // This empty string represents the subsequence of an empty string
        if (str.length() == 0) {
            ArrayList<String> empty = new ArrayList<>();
            empty.add("");
            return empty;
        }

        // Take the first character
        char ch = str.charAt(0);

        // Take the rest of the string (excluding the first character)
        String subStr = str.substring(1);
 
        // Recursively get all subsequences of the remaining substring
        ArrayList<String> subSequences = recur(subStr);
 
        // Now create a new list to store final results
        ArrayList<String> res = new ArrayList<>();

        // For every subsequence from subSequences:
        // 1. Add it as is (without including the current character)
        // 2. Add another version with the current character prefixed
        for (String val : subSequences) {
            res.add(val);         // subsequence without current character
            res.add(ch + val);    // subsequence with current character
        }

        // Return the complete list of subsequences for this recursion level
        return res;
    }

    // Function to generate and process subsequences in sorted order
    public static ArrayList<String> generateSubsequences(String str)
    {
        // Call the recursive function
        ArrayList<String> res = recur(str);

        // Remove the empty string ("") from the result list
        // because usually, we don't consider an empty subsequence
        res.remove("");

        // Sort the subsequences alphabetically
        Collections.sort(res);

        // Return the final list
        return res;   
    }
	
	public static void main(String[] args) {
        // Create a Scanner to read input from the user
        Scanner sc = new Scanner(System.in);

        // Read a string from input
        String s = sc.nextLine();

        // Generate all sorted subsequences
        ArrayList<String> res = generateSubsequences(s);

        // Print each subsequence in a new line
        for(int i = 0; i < res.size(); i++){
            System.out.println(res.get(i));
        }
    }
}
