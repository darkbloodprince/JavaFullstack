/*Print all subsequences of a string
Given a string, we have to find out all subsequences of it. A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.

Follow up:

Can you come up with an alogrithm that don't have index as parameter in its recursive function?

Input Format
First line contains a string str.

Output Format
Print all subsequences of a str.

Example 1
Input

abc
Output:

abc ab ac a bc b c 
Example 2
Input

abcd
Output:

abcd abc abd ab acd ac ad a bcd bc bd b cd c d  
Constraints
0<=lenght(str)<=10
Hint 2
Think about using recursion.

Approach:
Algorithm

We generate subsequences by either choosing the current character or not choosing the current character.
In the recursive function, we pass two variables the input string and the output string.
In each recursive call, we call the recursive function by passing the input string from one character ahead and output string which is formed by appending that leftmost character to the current output string.
In the same recursive function, we call the recursive function again but this time not appending anything to the output string meaning that we excluded the current character.

Time Complexity:

O(n*2^n)

Space Complexity: O(2^n)

Below is the implementation of the algorithm

1. Java*/
import java.util.*;
import java.util.Scanner;

public class Printallsubsequencesofastring {

    // Recursive function to find all possible subsequences of a string
    static void findsubsequences(String s, String ans, List<String> al) {

        // Base case: if the input string becomes empty
        // add the current accumulated subsequence (ans) to the list
        if (s.length() == 0) {
            al.add(ans);
            return;
        }

        // Recursive case 1 → Include the first character of 's' in the subsequence
        findsubsequences(s.substring(1), ans + s.charAt(0), al);

        // Recursive case 2 → Exclude the first character of 's' from the subsequence
        findsubsequences(s.substring(1), ans, al);
    }

    // Function to print all subsequences of a given string
    static void printSubsequence(String s) {
        // List to store all generated subsequences
        List<String> al = new ArrayList<>();

        // Start with an empty temporary string
        String temp = "";

        // Generate all subsequences
        findsubsequences(s, temp, al);

        // Print each subsequence from the list
        for (int i = 0; i < al.size(); i++)
            System.out.print(al.get(i) + " ");
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        // Take input string from the user
        String s = sc.nextLine();

        // Print all subsequences of the given string
        printSubsequence(s);
    }
}
